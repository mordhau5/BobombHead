/*
	NOTES AND SCRATCHWORK
*/
"PERIPHERALS"
	-leftEyeTopServo,0
	-leftEyeBottomServo,1
	-rightEyeTopServo,2
	-rightEyeBottomServo,3
	-LeftEyeRLED,4
	-LeftEyeWLED,5
	-RightEyeRLED,6
	-RightEyeWLED,7
	-EmoteLED,8
	-SmokeGen,9
	-TurnkeyMotor,10
	-FuseRLED1,11
	-FuseGLED1,12
	-FuseBLED1,13
	-FuseRLED2,14
	-FuseGLED2,15
	-FuseBLED2,16
	-FuseRLED3,17
	-FuseGLED3,18
	-FuseBLED3,19
	-FanIntake,20
	-FanExhaust,21
	-{Types of devices: Servo(PWM (byte)), DC-Motor(), LED(PWM (byte)), Fan(?? possibly just power no control), Smoke(??)}

"SEQUENCES"(20, 21 always on)
	-Normal: “The normal, calm state.”: [0,1,2,3 off],[4,6 off],[5,7 ~50-70%],[8 off],[9 off],[10 slow],[11-19 off]
	-Sleepy: 'Droopy':
	-Haywire: 'Going apeshit, malfunctioning'
	-Angry: :
	-Furious: :
	-Lit: :
	-Blown: “Post-explosion”

"OBJECTS"
	-Bobomb //(HAS a body) (sets up globals, constants, sequences)
	-Body //(HAS a fuse, eye(left), eye(right), vein, key, face, mouth, and brain) (waits for events, sends event params to body parts)
	-Brain //(accepts triggers, process sequences, launches events)
	-Fuse //(HAS three leds(RGB) and a smokegen) (ignites, smokes, sparks, diffuses)
	-Eye //(HAS a servo(top), servo(bottom), and led(RGBW) ) (changes brightness, changes color, flashes, goes off, moves eyelids)
	-Vein //(HAS an led(R)) (changes brightness, flashes, goes off)
	-Key //(HAS a motor) (spins, changes direction, halts)
	-Mouth?




{
-45 frames in 1.5 seconds
-30 Frames in a second
-15 frames in 500 ms 
-7.5 frames in 250 ms
 ---> .0333 frames/ms
 If I can generate .0333 fpms then I need to wait about 1 ms between rendering output for each device
}



Generating a new sequence randomly:
	Constraints on events:
		Final Values: 
			-can be completely random
		Initial values: 
			-can be random {within a range acceptable by the peripheral} -but additional Events on the same peripheral SHOULD not break its state {ie ends on 255 and picks up again at 50}
		Event runtime: 
			-can be random but should probably be within a certain range so the results can be observed easily
		Event Start Time:
			-New events must begin no earlier than the previous one on the timeline
			-A new event on the same peripheral cannot begin before that peripherals runtime is up before it completes
			-need to consider leaving a tolerance time between events on the same peripheral

As of now (4/14) For an event to operate, it has to:
	-A) Have a start time before the current time
	-B) Not be completed
	-C) Have an op time before the current time
^^ Need to condense this ^^
	Maybe Op time and start time can be combined?
		-By saying that the start time is the op time (initially) that covers it getting started the first time around
		-Then each time it gets an operation that time can be incremented by the Time between ops set by the event